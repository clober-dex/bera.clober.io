/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ErrorsInterface extends utils.Interface {
  functions: {
    "ACCESS()": FunctionFragment;
    "DEADLINE()": FunctionFragment;
    "DELEGATE_CALL()": FunctionFragment;
    "EMPTY_INPUT()": FunctionFragment;
    "FAILED_TO_SEND_VALUE()": FunctionFragment;
    "INSUFFICIENT_BALANCE()": FunctionFragment;
    "INVALID_COEFFICIENTS()": FunctionFragment;
    "INVALID_FEE()": FunctionFragment;
    "INVALID_ID()": FunctionFragment;
    "INVALID_PRICE()": FunctionFragment;
    "INVALID_PRICE_INDEX()": FunctionFragment;
    "INVALID_QUOTE_TOKEN()": FunctionFragment;
    "NOT_IMPLEMENTED_INTERFACE()": FunctionFragment;
    "OVERFLOW_UNDERFLOW()": FunctionFragment;
    "POST_ONLY()": FunctionFragment;
    "QUEUE_REPLACE_FAILED()": FunctionFragment;
    "REENTRANCY()": FunctionFragment;
    "SLIPPAGE()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCESS"
      | "DEADLINE"
      | "DELEGATE_CALL"
      | "EMPTY_INPUT"
      | "FAILED_TO_SEND_VALUE"
      | "INSUFFICIENT_BALANCE"
      | "INVALID_COEFFICIENTS"
      | "INVALID_FEE"
      | "INVALID_ID"
      | "INVALID_PRICE"
      | "INVALID_PRICE_INDEX"
      | "INVALID_QUOTE_TOKEN"
      | "NOT_IMPLEMENTED_INTERFACE"
      | "OVERFLOW_UNDERFLOW"
      | "POST_ONLY"
      | "QUEUE_REPLACE_FAILED"
      | "REENTRANCY"
      | "SLIPPAGE"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ACCESS", values?: undefined): string;
  encodeFunctionData(functionFragment: "DEADLINE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DELEGATE_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMPTY_INPUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAILED_TO_SEND_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSUFFICIENT_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_COEFFICIENTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_PRICE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_QUOTE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOT_IMPLEMENTED_INTERFACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OVERFLOW_UNDERFLOW",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POST_ONLY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "QUEUE_REPLACE_FAILED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REENTRANCY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SLIPPAGE", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ACCESS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DEADLINE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATE_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_INPUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAILED_TO_SEND_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSUFFICIENT_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_COEFFICIENTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "INVALID_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_PRICE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_QUOTE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NOT_IMPLEMENTED_INTERFACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OVERFLOW_UNDERFLOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POST_ONLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "QUEUE_REPLACE_FAILED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "REENTRANCY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SLIPPAGE", data: BytesLike): Result;

  events: {};
}

export interface Errors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCESS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEADLINE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DELEGATE_CALL(overrides?: CallOverrides): Promise<[BigNumber]>;

    EMPTY_INPUT(overrides?: CallOverrides): Promise<[BigNumber]>;

    FAILED_TO_SEND_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_COEFFICIENTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_PRICE_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    INVALID_QUOTE_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>;

    NOT_IMPLEMENTED_INTERFACE(overrides?: CallOverrides): Promise<[BigNumber]>;

    OVERFLOW_UNDERFLOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    POST_ONLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    QUEUE_REPLACE_FAILED(overrides?: CallOverrides): Promise<[BigNumber]>;

    REENTRANCY(overrides?: CallOverrides): Promise<[BigNumber]>;

    SLIPPAGE(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ACCESS(overrides?: CallOverrides): Promise<BigNumber>;

  DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

  DELEGATE_CALL(overrides?: CallOverrides): Promise<BigNumber>;

  EMPTY_INPUT(overrides?: CallOverrides): Promise<BigNumber>;

  FAILED_TO_SEND_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_COEFFICIENTS(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_ID(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_PRICE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  INVALID_QUOTE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

  NOT_IMPLEMENTED_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

  OVERFLOW_UNDERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

  POST_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

  QUEUE_REPLACE_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

  REENTRANCY(overrides?: CallOverrides): Promise<BigNumber>;

  SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ACCESS(overrides?: CallOverrides): Promise<BigNumber>;

    DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATE_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    EMPTY_INPUT(overrides?: CallOverrides): Promise<BigNumber>;

    FAILED_TO_SEND_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_COEFFICIENTS(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_ID(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_PRICE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_QUOTE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    NOT_IMPLEMENTED_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

    OVERFLOW_UNDERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    POST_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE_REPLACE_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    REENTRANCY(overrides?: CallOverrides): Promise<BigNumber>;

    SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ACCESS(overrides?: CallOverrides): Promise<BigNumber>;

    DEADLINE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATE_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    EMPTY_INPUT(overrides?: CallOverrides): Promise<BigNumber>;

    FAILED_TO_SEND_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    INSUFFICIENT_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_COEFFICIENTS(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_ID(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_PRICE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_QUOTE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    NOT_IMPLEMENTED_INTERFACE(overrides?: CallOverrides): Promise<BigNumber>;

    OVERFLOW_UNDERFLOW(overrides?: CallOverrides): Promise<BigNumber>;

    POST_ONLY(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE_REPLACE_FAILED(overrides?: CallOverrides): Promise<BigNumber>;

    REENTRANCY(overrides?: CallOverrides): Promise<BigNumber>;

    SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEADLINE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DELEGATE_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EMPTY_INPUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FAILED_TO_SEND_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSUFFICIENT_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INVALID_COEFFICIENTS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INVALID_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_PRICE_INDEX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INVALID_QUOTE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NOT_IMPLEMENTED_INTERFACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OVERFLOW_UNDERFLOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POST_ONLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    QUEUE_REPLACE_FAILED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REENTRANCY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLIPPAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
