/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace CloberMarketFactory {
  export type MarketInfoStruct = {
    host: string;
    marketType: BigNumberish;
    a: BigNumberish;
    factor: BigNumberish;
    futureHost: string;
  };

  export type MarketInfoStructOutput = [
    string,
    number,
    BigNumber,
    BigNumber,
    string
  ] & {
    host: string;
    marketType: number;
    a: BigNumber;
    factor: BigNumber;
    futureHost: string;
  };
}

export interface CloberMarketFactoryInterface extends utils.Interface {
  functions: {
    "canceler()": FunctionFragment;
    "changeDaoTreasury(address)": FunctionFragment;
    "createStableMarket(address,address,address,uint96,int24,uint24,uint128,uint128)": FunctionFragment;
    "createVolatileMarket(address,address,address,uint96,int24,uint24,uint128,uint128)": FunctionFragment;
    "daoTreasury()": FunctionFragment;
    "deployedArithmeticPriceBook(uint128,uint128)": FunctionFragment;
    "deployedGeometricPriceBook(uint128,uint128)": FunctionFragment;
    "executeChangeOwner()": FunctionFragment;
    "executeHandOverHost(address)": FunctionFragment;
    "formatOrderTokenName(address,address,uint256)": FunctionFragment;
    "formatOrderTokenSymbol(address,address,uint256)": FunctionFragment;
    "futureOwner()": FunctionFragment;
    "getMarketHost(address)": FunctionFragment;
    "getMarketInfo(address)": FunctionFragment;
    "marketDeployer()": FunctionFragment;
    "nonce()": FunctionFragment;
    "orderTokenDeployer()": FunctionFragment;
    "owner()": FunctionFragment;
    "prepareChangeOwner(address)": FunctionFragment;
    "prepareHandOverHost(address,address)": FunctionFragment;
    "priceBookDeployer()": FunctionFragment;
    "registerQuoteToken(address)": FunctionFragment;
    "registeredQuoteTokens(address)": FunctionFragment;
    "unregisterQuoteToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canceler"
      | "changeDaoTreasury"
      | "createStableMarket"
      | "createVolatileMarket"
      | "daoTreasury"
      | "deployedArithmeticPriceBook"
      | "deployedGeometricPriceBook"
      | "executeChangeOwner"
      | "executeHandOverHost"
      | "formatOrderTokenName"
      | "formatOrderTokenSymbol"
      | "futureOwner"
      | "getMarketHost"
      | "getMarketInfo"
      | "marketDeployer"
      | "nonce"
      | "orderTokenDeployer"
      | "owner"
      | "prepareChangeOwner"
      | "prepareHandOverHost"
      | "priceBookDeployer"
      | "registerQuoteToken"
      | "registeredQuoteTokens"
      | "unregisterQuoteToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "canceler", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeDaoTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createStableMarket",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createVolatileMarket",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployedArithmeticPriceBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedGeometricPriceBook",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeChangeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeHandOverHost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "formatOrderTokenName",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formatOrderTokenSymbol",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "futureOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketHost",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderTokenDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareChangeOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareHandOverHost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceBookDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerQuoteToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredQuoteTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterQuoteToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "canceler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDaoTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStableMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVolatileMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedArithmeticPriceBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedGeometricPriceBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeChangeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeHandOverHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatOrderTokenName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatOrderTokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareChangeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareHandOverHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceBookDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerQuoteToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredQuoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterQuoteToken",
    data: BytesLike
  ): Result;

  events: {
    "ChangeDaoTreasury(address,address)": EventFragment;
    "ChangeHost(address,address,address)": EventFragment;
    "ChangeOwner(address,address)": EventFragment;
    "CreateStableMarket(address,address,address,address,uint256,uint256,int24,uint24,uint128,uint128)": EventFragment;
    "CreateVolatileMarket(address,address,address,address,uint256,uint256,int24,uint24,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeDaoTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeHost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateStableMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateVolatileMarket"): EventFragment;
}

export interface ChangeDaoTreasuryEventObject {
  previousTreasury: string;
  newTreasury: string;
}
export type ChangeDaoTreasuryEvent = TypedEvent<
  [string, string],
  ChangeDaoTreasuryEventObject
>;

export type ChangeDaoTreasuryEventFilter =
  TypedEventFilter<ChangeDaoTreasuryEvent>;

export interface ChangeHostEventObject {
  market: string;
  previousHost: string;
  newHost: string;
}
export type ChangeHostEvent = TypedEvent<
  [string, string, string],
  ChangeHostEventObject
>;

export type ChangeHostEventFilter = TypedEventFilter<ChangeHostEvent>;

export interface ChangeOwnerEventObject {
  previousOwner: string;
  newOwner: string;
}
export type ChangeOwnerEvent = TypedEvent<
  [string, string],
  ChangeOwnerEventObject
>;

export type ChangeOwnerEventFilter = TypedEventFilter<ChangeOwnerEvent>;

export interface CreateStableMarketEventObject {
  market: string;
  orderToken: string;
  quoteToken: string;
  baseToken: string;
  quoteUnit: BigNumber;
  nonce: BigNumber;
  makerFee: number;
  takerFee: number;
  a: BigNumber;
  d: BigNumber;
}
export type CreateStableMarketEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber
  ],
  CreateStableMarketEventObject
>;

export type CreateStableMarketEventFilter =
  TypedEventFilter<CreateStableMarketEvent>;

export interface CreateVolatileMarketEventObject {
  market: string;
  orderToken: string;
  quoteToken: string;
  baseToken: string;
  quoteUnit: BigNumber;
  nonce: BigNumber;
  makerFee: number;
  takerFee: number;
  a: BigNumber;
  r: BigNumber;
}
export type CreateVolatileMarketEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber,
    BigNumber
  ],
  CreateVolatileMarketEventObject
>;

export type CreateVolatileMarketEventFilter =
  TypedEventFilter<CreateVolatileMarketEvent>;

export interface CloberMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CloberMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canceler(overrides?: CallOverrides): Promise<[string]>;

    changeDaoTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createStableMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createVolatileMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      r: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    daoTreasury(overrides?: CallOverrides): Promise<[string]>;

    deployedArithmeticPriceBook(
      a: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deployedGeometricPriceBook(
      a: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeChangeOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeHandOverHost(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    formatOrderTokenName(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    formatOrderTokenSymbol(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    futureOwner(overrides?: CallOverrides): Promise<[string]>;

    getMarketHost(market: string, overrides?: CallOverrides): Promise<[string]>;

    getMarketInfo(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [CloberMarketFactory.MarketInfoStructOutput] & {
        marketInfo: CloberMarketFactory.MarketInfoStructOutput;
      }
    >;

    marketDeployer(overrides?: CallOverrides): Promise<[string]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderTokenDeployer(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prepareChangeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    prepareHandOverHost(
      market: string,
      newHost: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    priceBookDeployer(overrides?: CallOverrides): Promise<[string]>;

    registerQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registeredQuoteTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unregisterQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  canceler(overrides?: CallOverrides): Promise<string>;

  changeDaoTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createStableMarket(
    host: string,
    quoteToken: string,
    baseToken: string,
    quoteUnit: BigNumberish,
    makerFee: BigNumberish,
    takerFee: BigNumberish,
    a: BigNumberish,
    d: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createVolatileMarket(
    host: string,
    quoteToken: string,
    baseToken: string,
    quoteUnit: BigNumberish,
    makerFee: BigNumberish,
    takerFee: BigNumberish,
    a: BigNumberish,
    r: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  daoTreasury(overrides?: CallOverrides): Promise<string>;

  deployedArithmeticPriceBook(
    a: BigNumberish,
    d: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  deployedGeometricPriceBook(
    a: BigNumberish,
    r: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  executeChangeOwner(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeHandOverHost(
    market: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  formatOrderTokenName(
    quoteToken: string,
    baseToken: string,
    marketNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  formatOrderTokenSymbol(
    quoteToken: string,
    baseToken: string,
    marketNonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  futureOwner(overrides?: CallOverrides): Promise<string>;

  getMarketHost(market: string, overrides?: CallOverrides): Promise<string>;

  getMarketInfo(
    market: string,
    overrides?: CallOverrides
  ): Promise<CloberMarketFactory.MarketInfoStructOutput>;

  marketDeployer(overrides?: CallOverrides): Promise<string>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  orderTokenDeployer(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prepareChangeOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  prepareHandOverHost(
    market: string,
    newHost: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  priceBookDeployer(overrides?: CallOverrides): Promise<string>;

  registerQuoteToken(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registeredQuoteTokens(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unregisterQuoteToken(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    canceler(overrides?: CallOverrides): Promise<string>;

    changeDaoTreasury(
      treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createStableMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createVolatileMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    daoTreasury(overrides?: CallOverrides): Promise<string>;

    deployedArithmeticPriceBook(
      a: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedGeometricPriceBook(
      a: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    executeChangeOwner(overrides?: CallOverrides): Promise<void>;

    executeHandOverHost(
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    formatOrderTokenName(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    formatOrderTokenSymbol(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    futureOwner(overrides?: CallOverrides): Promise<string>;

    getMarketHost(market: string, overrides?: CallOverrides): Promise<string>;

    getMarketInfo(
      market: string,
      overrides?: CallOverrides
    ): Promise<CloberMarketFactory.MarketInfoStructOutput>;

    marketDeployer(overrides?: CallOverrides): Promise<string>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    orderTokenDeployer(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prepareChangeOwner(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    prepareHandOverHost(
      market: string,
      newHost: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceBookDeployer(overrides?: CallOverrides): Promise<string>;

    registerQuoteToken(token: string, overrides?: CallOverrides): Promise<void>;

    registeredQuoteTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unregisterQuoteToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeDaoTreasury(address,address)"(
      previousTreasury?: null,
      newTreasury?: null
    ): ChangeDaoTreasuryEventFilter;
    ChangeDaoTreasury(
      previousTreasury?: null,
      newTreasury?: null
    ): ChangeDaoTreasuryEventFilter;

    "ChangeHost(address,address,address)"(
      market?: string | null,
      previousHost?: null,
      newHost?: null
    ): ChangeHostEventFilter;
    ChangeHost(
      market?: string | null,
      previousHost?: null,
      newHost?: null
    ): ChangeHostEventFilter;

    "ChangeOwner(address,address)"(
      previousOwner?: null,
      newOwner?: null
    ): ChangeOwnerEventFilter;
    ChangeOwner(previousOwner?: null, newOwner?: null): ChangeOwnerEventFilter;

    "CreateStableMarket(address,address,address,address,uint256,uint256,int24,uint24,uint128,uint128)"(
      market?: string | null,
      orderToken?: null,
      quoteToken?: null,
      baseToken?: null,
      quoteUnit?: null,
      nonce?: null,
      makerFee?: null,
      takerFee?: null,
      a?: null,
      d?: null
    ): CreateStableMarketEventFilter;
    CreateStableMarket(
      market?: string | null,
      orderToken?: null,
      quoteToken?: null,
      baseToken?: null,
      quoteUnit?: null,
      nonce?: null,
      makerFee?: null,
      takerFee?: null,
      a?: null,
      d?: null
    ): CreateStableMarketEventFilter;

    "CreateVolatileMarket(address,address,address,address,uint256,uint256,int24,uint24,uint128,uint128)"(
      market?: string | null,
      orderToken?: null,
      quoteToken?: null,
      baseToken?: null,
      quoteUnit?: null,
      nonce?: null,
      makerFee?: null,
      takerFee?: null,
      a?: null,
      r?: null
    ): CreateVolatileMarketEventFilter;
    CreateVolatileMarket(
      market?: string | null,
      orderToken?: null,
      quoteToken?: null,
      baseToken?: null,
      quoteUnit?: null,
      nonce?: null,
      makerFee?: null,
      takerFee?: null,
      a?: null,
      r?: null
    ): CreateVolatileMarketEventFilter;
  };

  estimateGas: {
    canceler(overrides?: CallOverrides): Promise<BigNumber>;

    changeDaoTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createStableMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createVolatileMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      r: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    daoTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    deployedArithmeticPriceBook(
      a: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployedGeometricPriceBook(
      a: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeChangeOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeHandOverHost(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    formatOrderTokenName(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatOrderTokenSymbol(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    futureOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketHost(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketInfo(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    orderTokenDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prepareChangeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    prepareHandOverHost(
      market: string,
      newHost: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    priceBookDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    registerQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registeredQuoteTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unregisterQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canceler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeDaoTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createStableMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createVolatileMarket(
      host: string,
      quoteToken: string,
      baseToken: string,
      quoteUnit: BigNumberish,
      makerFee: BigNumberish,
      takerFee: BigNumberish,
      a: BigNumberish,
      r: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    daoTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployedArithmeticPriceBook(
      a: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployedGeometricPriceBook(
      a: BigNumberish,
      r: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeChangeOwner(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeHandOverHost(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    formatOrderTokenName(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formatOrderTokenSymbol(
      quoteToken: string,
      baseToken: string,
      marketNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    futureOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketHost(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketInfo(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderTokenDeployer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareChangeOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    prepareHandOverHost(
      market: string,
      newHost: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    priceBookDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registeredQuoteTokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unregisterQuoteToken(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
