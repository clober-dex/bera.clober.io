/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type OrderKeyStruct = {
  isBid: boolean;
  priceIndex: BigNumberish;
  orderIndex: BigNumberish;
};

export type OrderKeyStructOutput = [boolean, number, BigNumber] & {
  isBid: boolean;
  priceIndex: number;
  orderIndex: BigNumber;
};

export declare namespace CloberRouter {
  export type ClaimOrderParamsStruct = {
    market: string;
    orderKeys: OrderKeyStruct[];
  };

  export type ClaimOrderParamsStructOutput = [
    string,
    OrderKeyStructOutput[]
  ] & { market: string; orderKeys: OrderKeyStructOutput[] };

  export type LimitOrderParamsStruct = {
    market: string;
    deadline: BigNumberish;
    claimBounty: BigNumberish;
    user: string;
    priceIndex: BigNumberish;
    rawAmount: BigNumberish;
    postOnly: boolean;
    useNative: boolean;
    baseAmount: BigNumberish;
  };

  export type LimitOrderParamsStructOutput = [
    string,
    BigNumber,
    number,
    string,
    number,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    market: string;
    deadline: BigNumber;
    claimBounty: number;
    user: string;
    priceIndex: number;
    rawAmount: BigNumber;
    postOnly: boolean;
    useNative: boolean;
    baseAmount: BigNumber;
  };

  export type GeneralLimitOrderParamsStruct = {
    params: CloberRouter.LimitOrderParamsStruct;
    isBid: boolean;
  };

  export type GeneralLimitOrderParamsStructOutput = [
    CloberRouter.LimitOrderParamsStructOutput,
    boolean
  ] & { params: CloberRouter.LimitOrderParamsStructOutput; isBid: boolean };

  export type MarketOrderParamsStruct = {
    market: string;
    deadline: BigNumberish;
    user: string;
    limitPriceIndex: BigNumberish;
    rawAmount: BigNumberish;
    expendInput: boolean;
    useNative: boolean;
    baseAmount: BigNumberish;
  };

  export type MarketOrderParamsStructOutput = [
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    boolean,
    boolean,
    BigNumber
  ] & {
    market: string;
    deadline: BigNumber;
    user: string;
    limitPriceIndex: number;
    rawAmount: BigNumber;
    expendInput: boolean;
    useNative: boolean;
    baseAmount: BigNumber;
  };
}

export interface MarketRouterInterface extends utils.Interface {
  functions: {
    "claim(uint64,(address,(bool,uint16,uint256)[])[])": FunctionFragment;
    "cloberMarketSwapCallback(address,address,uint256,uint256,bytes)": FunctionFragment;
    "isRegisteredMarket(address)": FunctionFragment;
    "limitAsk((address,uint64,uint32,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "limitAskAfterClaim((address,(bool,uint16,uint256)[])[],(address,uint64,uint32,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "limitBid((address,uint64,uint32,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "limitBidAfterClaim((address,(bool,uint16,uint256)[])[],(address,uint64,uint32,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "limitOrder(((address,uint64,uint32,address,uint16,uint64,bool,bool,uint256),bool)[],(address,(bool,uint16,uint256)[])[])": FunctionFragment;
    "marketAsk((address,uint64,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "marketAskAfterClaim((address,(bool,uint16,uint256)[])[],(address,uint64,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "marketBid((address,uint64,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "marketBidAfterClaim((address,(bool,uint16,uint256)[])[],(address,uint64,address,uint16,uint64,bool,bool,uint256))": FunctionFragment;
    "registerMarkets(address[])": FunctionFragment;
    "unregisterMarkets(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "cloberMarketSwapCallback"
      | "isRegisteredMarket"
      | "limitAsk"
      | "limitAskAfterClaim"
      | "limitBid"
      | "limitBidAfterClaim"
      | "limitOrder"
      | "marketAsk"
      | "marketAskAfterClaim"
      | "marketBid"
      | "marketBidAfterClaim"
      | "registerMarkets"
      | "unregisterMarkets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, CloberRouter.ClaimOrderParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cloberMarketSwapCallback",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "limitAsk",
    values: [CloberRouter.LimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "limitAskAfterClaim",
    values: [
      CloberRouter.ClaimOrderParamsStruct[],
      CloberRouter.LimitOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "limitBid",
    values: [CloberRouter.LimitOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "limitBidAfterClaim",
    values: [
      CloberRouter.ClaimOrderParamsStruct[],
      CloberRouter.LimitOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrder",
    values: [
      CloberRouter.GeneralLimitOrderParamsStruct[],
      CloberRouter.ClaimOrderParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAsk",
    values: [CloberRouter.MarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAskAfterClaim",
    values: [
      CloberRouter.ClaimOrderParamsStruct[],
      CloberRouter.MarketOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBid",
    values: [CloberRouter.MarketOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBidAfterClaim",
    values: [
      CloberRouter.ClaimOrderParamsStruct[],
      CloberRouter.MarketOrderParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterMarkets",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cloberMarketSwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitAsk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitAskAfterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitBidAfterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "limitOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketAsk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketAskAfterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketBidAfterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterMarkets",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      deadline: BigNumberish,
      paramsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cloberMarketSwapCallback(
      inputToken: string,
      arg1: string,
      inputAmount: BigNumberish,
      arg3: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    isRegisteredMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitAsk(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    limitAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    limitBid(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    limitBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    limitOrder(
      limitOrderParamsList: CloberRouter.GeneralLimitOrderParamsStruct[],
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketAsk(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketBid(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unregisterMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  claim(
    deadline: BigNumberish,
    paramsList: CloberRouter.ClaimOrderParamsStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cloberMarketSwapCallback(
    inputToken: string,
    arg1: string,
    inputAmount: BigNumberish,
    arg3: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  isRegisteredMarket(
    market: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  limitAsk(
    params: CloberRouter.LimitOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  limitAskAfterClaim(
    claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
    limitOrderParams: CloberRouter.LimitOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  limitBid(
    params: CloberRouter.LimitOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  limitBidAfterClaim(
    claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
    limitOrderParams: CloberRouter.LimitOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  limitOrder(
    limitOrderParamsList: CloberRouter.GeneralLimitOrderParamsStruct[],
    claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketAsk(
    params: CloberRouter.MarketOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketAskAfterClaim(
    claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
    marketOrderParams: CloberRouter.MarketOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketBid(
    params: CloberRouter.MarketOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketBidAfterClaim(
    claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
    marketOrderParams: CloberRouter.MarketOrderParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerMarkets(
    markets: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unregisterMarkets(
    markets: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      deadline: BigNumberish,
      paramsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    cloberMarketSwapCallback(
      inputToken: string,
      arg1: string,
      inputAmount: BigNumberish,
      arg3: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isRegisteredMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitAsk(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitBid(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitOrder(
      limitOrderParamsList: CloberRouter.GeneralLimitOrderParamsStruct[],
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    marketAsk(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    marketAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    marketBid(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    marketBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    registerMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claim(
      deadline: BigNumberish,
      paramsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cloberMarketSwapCallback(
      inputToken: string,
      arg1: string,
      inputAmount: BigNumberish,
      arg3: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    isRegisteredMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitAsk(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    limitAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    limitBid(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    limitBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    limitOrder(
      limitOrderParamsList: CloberRouter.GeneralLimitOrderParamsStruct[],
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    marketAsk(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    marketAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    marketBid(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    marketBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    registerMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unregisterMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      deadline: BigNumberish,
      paramsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cloberMarketSwapCallback(
      inputToken: string,
      arg1: string,
      inputAmount: BigNumberish,
      arg3: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isRegisteredMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitAsk(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    limitAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    limitBid(
      params: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    limitBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      limitOrderParams: CloberRouter.LimitOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    limitOrder(
      limitOrderParamsList: CloberRouter.GeneralLimitOrderParamsStruct[],
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketAsk(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketAskAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketBid(
      params: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketBidAfterClaim(
      claimParamsList: CloberRouter.ClaimOrderParamsStruct[],
      marketOrderParams: CloberRouter.MarketOrderParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unregisterMarkets(
      markets: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
