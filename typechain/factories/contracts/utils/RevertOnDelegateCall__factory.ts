/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RevertOnDelegateCall,
  RevertOnDelegateCallInterface,
} from "../../../contracts/utils/RevertOnDelegateCall";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5030608052608051603f602960003960005050603f6000f3fe6080604052600080fdfea26469706673582212207f6c7a131c78c14759204ff0dc8067dcf0822b47ccc604dbb2205a256089012364736f6c63430008110033";

type RevertOnDelegateCallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevertOnDelegateCallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevertOnDelegateCall__factory extends ContractFactory {
  constructor(...args: RevertOnDelegateCallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<RevertOnDelegateCall> {
    return super.deploy(overrides || {}) as Promise<RevertOnDelegateCall>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RevertOnDelegateCall {
    return super.attach(address) as RevertOnDelegateCall;
  }
  override connect(signer: Signer): RevertOnDelegateCall__factory {
    return super.connect(signer) as RevertOnDelegateCall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevertOnDelegateCallInterface {
    return new utils.Interface(_abi) as RevertOnDelegateCallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevertOnDelegateCall {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as RevertOnDelegateCall;
  }
}
