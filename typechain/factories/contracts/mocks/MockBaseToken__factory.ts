/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBaseToken,
  MockBaseTokenInterface,
} from "../../../contracts/mocks/MockBaseToken";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b506040518060400160405280600d81526020016c46616b6520457468657265756d60981b815250604051806040016040528060048152602001630cc8aa8960e31b8152506012828281600390816200006a919062000130565b50600462000079828262000130565b50505060ff1660805250620001fc9050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000b657607f821691505b602082108103620000d757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012b57600081815260208120601f850160051c81016020861015620001065750805b601f850160051c820191505b81811015620001275782815560010162000112565b5050505b505050565b81516001600160401b038111156200014c576200014c6200008b565b62000164816200015d8454620000a1565b84620000dd565b602080601f8311600181146200019c5760008415620001835750858301515b600019600386901b1c1916600185901b17855562000127565b600085815260208120601f198616915b82811015620001cd57888601518255948401946001909101908401620001ac565b5085821015620001ec5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610a5d6200021860003960006101460152610a5d6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806340c10f1911610081578063a457c2d71161005b578063a457c2d7146101c9578063a9059cbb146101dc578063dd62ed3e146101ef57600080fd5b806340c10f191461018357806370a082311461019857806395d89b41146101c157600080fd5b806323b872dd116100b257806323b872dd1461012c578063313ce5671461013f578063395093511461017057600080fd5b806306fdde03146100d9578063095ea7b3146100f757806318160ddd1461011a575b600080fd5b6100e1610228565b6040516100ee91906108a7565b60405180910390f35b61010a610105366004610911565b6102ba565b60405190151581526020016100ee565b6002545b6040519081526020016100ee565b61010a61013a36600461093b565b6102d4565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100ee565b61010a61017e366004610911565b6102f8565b610196610191366004610911565b610337565b005b61011e6101a6366004610977565b6001600160a01b031660009081526020819052604090205490565b6100e1610345565b61010a6101d7366004610911565b610354565b61010a6101ea366004610911565b610403565b61011e6101fd366004610999565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610237906109cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610263906109cc565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050905090565b6000336102c8818585610411565b60019150505b92915050565b6000336102e2858285610569565b6102ed8585856105fb565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102c89082908690610332908790610a06565b610411565b61034182826107e8565b5050565b606060048054610237906109cc565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103f65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ed8286868403610411565b6000336102c88185856105fb565b6001600160a01b03831661048c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103ed565b6001600160a01b0382166105085760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103ed565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146105f557818110156105e85760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103ed565b6105f58484848403610411565b50505050565b6001600160a01b0383166106775760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103ed565b6001600160a01b0382166106f35760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103ed565b6001600160a01b038316600090815260208190526040902054818110156107825760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103ed565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105f5565b6001600160a01b03821661083e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103ed565b80600260008282546108509190610a06565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b818110156108d4578581018301518582016040015282016108b8565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461090c57600080fd5b919050565b6000806040838503121561092457600080fd5b61092d836108f5565b946020939093013593505050565b60008060006060848603121561095057600080fd5b610959846108f5565b9250610967602085016108f5565b9150604084013590509250925092565b60006020828403121561098957600080fd5b610992826108f5565b9392505050565b600080604083850312156109ac57600080fd5b6109b5836108f5565b91506109c3602084016108f5565b90509250929050565b600181811c908216806109e057607f821691505b602082108103610a0057634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102ce57634e487b7160e01b600052601160045260246000fdfea2646970667358221220d9d5d72a24f4611d7c0c277df2cf1e108f8f38f44d206521f66b8d4ca8b0d26464736f6c63430008110033";

type MockBaseTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBaseTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBaseToken__factory extends ContractFactory {
  constructor(...args: MockBaseTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockBaseToken> {
    return super.deploy(overrides || {}) as Promise<MockBaseToken>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockBaseToken {
    return super.attach(address) as MockBaseToken;
  }
  override connect(signer: Signer): MockBaseToken__factory {
    return super.connect(signer) as MockBaseToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBaseTokenInterface {
    return new utils.Interface(_abi) as MockBaseTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaseToken {
    return new Contract(address, _abi, signerOrProvider) as MockBaseToken;
  }
}
