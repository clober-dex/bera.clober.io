/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DirtyUint64",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DirtyUint64__factory>;
    getContractFactory(
      name: "OctopusHeap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OctopusHeap__factory>;
    getContractFactory(
      name: "PackedUint256",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PackedUint256__factory>;
    getContractFactory(
      name: "SegmentedSegmentTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SegmentedSegmentTree__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ArithmeticPriceBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArithmeticPriceBook__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "GeometricPriceBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GeometricPriceBook__factory>;
    getContractFactory(
      name: "CloberMarketDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberMarketDeployer__factory>;
    getContractFactory(
      name: "CloberMarketFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberMarketFactory__factory>;
    getContractFactory(
      name: "CloberMarketFlashCallbackReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberMarketFlashCallbackReceiver__factory>;
    getContractFactory(
      name: "CloberMarketSwapCallbackReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberMarketSwapCallbackReceiver__factory>;
    getContractFactory(
      name: "CloberOrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberOrderBook__factory>;
    getContractFactory(
      name: "CloberOrderCanceler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberOrderCanceler__factory>;
    getContractFactory(
      name: "CloberOrderNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberOrderNFT__factory>;
    getContractFactory(
      name: "CloberOrderNFTDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberOrderNFTDeployer__factory>;
    getContractFactory(
      name: "CloberPriceBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberPriceBook__factory>;
    getContractFactory(
      name: "CloberPriceBookDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberPriceBookDeployer__factory>;
    getContractFactory(
      name: "CloberRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CloberRouter__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MarketDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketDeployer__factory>;
    getContractFactory(
      name: "MarketFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketFactory__factory>;
    getContractFactory(
      name: "MarketRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketRouter__factory>;
    getContractFactory(
      name: "MockBaseToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBaseToken__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockPriceBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceBook__factory>;
    getContractFactory(
      name: "MockQuoteToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockQuoteToken__factory>;
    getContractFactory(
      name: "MockWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWETH__factory>;
    getContractFactory(
      name: "GasReporter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasReporter__factory>;
    getContractFactory(
      name: "OrderBook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBook__factory>;
    getContractFactory(
      name: "OrderCanceler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderCanceler__factory>;
    getContractFactory(
      name: "OrderNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderNFT__factory>;
    getContractFactory(
      name: "OrderNFTDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderNFTDeployer__factory>;
    getContractFactory(
      name: "PriceBookDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceBookDeployer__factory>;
    getContractFactory(
      name: "RevertOnDelegateCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertOnDelegateCall__factory>;

    getContractAt(
      name: "DirtyUint64",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DirtyUint64>;
    getContractAt(
      name: "OctopusHeap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OctopusHeap>;
    getContractAt(
      name: "PackedUint256",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PackedUint256>;
    getContractAt(
      name: "SegmentedSegmentTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SegmentedSegmentTree>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ArithmeticPriceBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArithmeticPriceBook>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "GeometricPriceBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GeometricPriceBook>;
    getContractAt(
      name: "CloberMarketDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberMarketDeployer>;
    getContractAt(
      name: "CloberMarketFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberMarketFactory>;
    getContractAt(
      name: "CloberMarketFlashCallbackReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberMarketFlashCallbackReceiver>;
    getContractAt(
      name: "CloberMarketSwapCallbackReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberMarketSwapCallbackReceiver>;
    getContractAt(
      name: "CloberOrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberOrderBook>;
    getContractAt(
      name: "CloberOrderCanceler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberOrderCanceler>;
    getContractAt(
      name: "CloberOrderNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberOrderNFT>;
    getContractAt(
      name: "CloberOrderNFTDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberOrderNFTDeployer>;
    getContractAt(
      name: "CloberPriceBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberPriceBook>;
    getContractAt(
      name: "CloberPriceBookDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberPriceBookDeployer>;
    getContractAt(
      name: "CloberRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CloberRouter>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MarketDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketDeployer>;
    getContractAt(
      name: "MarketFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketFactory>;
    getContractAt(
      name: "MarketRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketRouter>;
    getContractAt(
      name: "MockBaseToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBaseToken>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockPriceBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceBook>;
    getContractAt(
      name: "MockQuoteToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockQuoteToken>;
    getContractAt(
      name: "MockWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWETH>;
    getContractAt(
      name: "GasReporter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasReporter>;
    getContractAt(
      name: "OrderBook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBook>;
    getContractAt(
      name: "OrderCanceler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderCanceler>;
    getContractAt(
      name: "OrderNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderNFT>;
    getContractAt(
      name: "OrderNFTDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderNFTDeployer>;
    getContractAt(
      name: "PriceBookDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceBookDeployer>;
    getContractAt(
      name: "RevertOnDelegateCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertOnDelegateCall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
